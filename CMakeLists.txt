CMAKE_MINIMUM_REQUIRED(VERSION 3.0)
# SET(BUILD_USE_64BITS ON)

IF(POLICY CMP0064)
    CMAKE_POLICY(SET CMP0064 NEW)
ENDIF()

SET(TEST true CACHE bool "default build test")
SET(CC_DISABLE_TIMING false CACHE bool "default not test time")
SET(TARGET_OS Android CACHE string "default Windows, support (Windows, Linux, Android)")
SET(TARGET_ARCH armv7 CACHE string "default x86_64, support (armv7, aarch64, x86_64)")

IF(CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux")
    IF(TARGET_OS STREQUAL "Linux" AND TARGET_ARCH STREQUAL "x86_64")
        SET(TARGET_CONFIG "gcc4.9_linux-x86_64")
        SET(CMAKE_C_COMPILER    /usr/bin/gcc)
        SET(CMAKE_CXX_COMPILER  /usr/bin/g++)
    ELSEIF(TARGET_OS STREQUAL "Android")
    	MESSAGE("cross compiling for android")
        #NOTE: change arm compiler
        IF(TARGET_ARCH STREQUAL "armv7")
            SET(NDK_STANDALONE_TOOLCHAIN /opt/android-ndk-r14b/android-armv7)
            SET(CMAKE_C_COMPILER ${NDK_STANDALONE_TOOLCHAIN}/bin/arm-linux-androideabi-gcc)
            SET(CMAKE_CXX_COMPILER ${NDK_STANDALONE_TOOLCHAIN}/bin/arm-linux-androideabi-g++)
        ELSEIF(TARGET_ARCH STREQUAL "aarch64")
            SET(NDK_STANDALONE_TOOLCHAIN /opt/android-ndk-r14b/android-aarch64)
            SET(CMAKE_C_COMPILER ${NDK_STANDALONE_TOOLCHAIN}/bin/aarch64-linux-android-gcc)
            SET(CMAKE_CXX_COMPILER ${NDK_STANDALONE_TOOLCHAIN}/bin/aarch64-linux-android-g++)
        ENDIF()
        SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fPIE -pie")
    ENDIF()
ELSEIF(CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
    SET(TARGET_CONFIG "msvc140_win64")
    SET(_CMAKE_TOOLCHAIN_LOCATION "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin")
    MESSAGE(STATUS ${_CMAKE_TOOLCHAIN_LOCATION})
    SET(CMAKE_C_COMPILER    ${_CMAKE_TOOLCHAIN_LOCATION}/cl.exe)
    SET(CMAKE_CXX_COMPILER  ${_CMAKE_TOOLCHAIN_LOCATION}/cl.exe)
ELSEIF()
    MESSAGE(FATAL_ERROR "Not support ${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR}!!!")
ENDIF()

PROJECT(practise)

IF(TARGET_OS STREQUAL "Linux")
    SET(TARGET_OS_LINK_LIBS pthread)
ENDIF()
IF (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    IF (CMAKE_SYSTEM_NAME MATCHES "Darwin")
        SET(NEWCXX_ENABLED_FLAG "-std=c++11 -stdlib=libc++ -Wall -O2")
    ELSE()
        SET(NEWCXX_ENABLED_FLAG "-std=c++11 -Wall -Wno-mismatched-tags -O2")
    ENDIF()
ELSEIF (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    SET(NEWCXX_ENABLED_FLAG "-std=c++11 -Wall")
ELSEIF(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Z7")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
    IF(CMAKE_TARGET_ARCH STREQUAL "X86")
        SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Ob1")
    ENDIF()
ELSE()
    MESSAGE(FATAL_ERROR, "Only GCC and clang is supported for now.")
ENDIF()

SET(CMAKE_CXX_FLAGS ${NEWCXX_ENABLED_FLAG})
MESSAGE(STATUS "CMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}")

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/include)
INCLUDE_DIRECTORIES(
    ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/gtest/include
    ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/gtest)
SET(GTEST_SRC ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/gtest/src/gtest-all.cc)
ADD_LIBRARY(gtest ${GTEST_SRC})

FILE(GLOB_RECURSE SRC src/*.cpp)
INCLUDE_DIRECTORIES(include)
ADD_LIBRARY(${CMAKE_PROJECT_NAME} SHARED ${SRC})
ADD_LIBRARY(${CMAKE_PROJECT_NAME}_s ${SRC})

SET(INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/install)
INSTALL(TARGETS ${CMAKE_PROJECT_NAME} DESTINATION ${INSTALL_DIR}/lib)
INSTALL(DIRECTORY include DESTINATION ${INSTALL_DIR}/include)

IF(TEST)
    FILE(GLOB_RECURSE TEST_SRC test/*.cpp test/*/*.cpp )
    ADD_EXECUTABLE(test_practise ${TEST_SRC})
    TARGET_LINK_LIBRARIES(test_practise 
        PUBLIC ${CMAKE_PROJECT_NAME}_s gtest ${TARGET_OS_LINK_LIBS})
ENDIF()